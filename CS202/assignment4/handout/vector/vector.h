/**
 * @file vector.h
 * @author
 * @brief
 *
 */

#pragma once

#include <exception>
#include <string>

/**
 * @brief
 * New exception class for handling exceptions generated by the
 * Vector class
 */
class DimensionMismatchException : public std::exception
{
  std::string message;

public:
  DimensionMismatchException() { this->message = ""; }
  DimensionMismatchException(std::string message) { this->message = message; }
  std::string what() { return message; }
};

/**
 * @brief
 * Linear algebra style 1 Dimension vector.
 *
 * @overload operator+ ,
 * 	Class member operator to add 2 vectors. (e.g., {1,2,3} + {3,6,9} = {4,8,12})
 *
 * @overload operator* ,
 * 	Class member operator to multiply 2 vecotrs of compatible dimension
 *
 * @overload operator*=
 *  Class member operator to perform inplace scaling on a given vector.
 *
 * @overload operator= ,
 * 	Class member operator to assign the values of one vector to another.
 * 	Must implement best practices for classes with pointer members.
 *
 * @overload operator<< ,
 * 	Friend style member operator overload to write formatted output for some
 *  RHS vector
 *
 * @overload operator>> ,
 * 	Friend style member overload to read data from some input and store the data
 * 	into a RHS vector
 */
class Vector
{
private:
  int size;        // Number of values in the floating point array
  float *contents; // Array of floating point values

public:
  /*** Constructors and Destructor ***/
  Vector() : size(0), contents(nullptr) {}
  Vector(int);
  Vector(const Vector &);
  ~Vector();

  /*** Overloaded Operators ***/
  Vector operator+(const Vector &) const;
  float operator*(const Vector &) const;
  void operator*=(float) const;
  void operator=(const Vector &);

  float &operator[](int);
  const float &operator[](int) const;

  /*** Friended Operator Overloads ***/
  friend std::ostream &operator<<(std::ostream &, const Vector &);
  friend std::istream &operator>>(std::istream &, Vector &);
};